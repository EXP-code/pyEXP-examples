#!/usr/bin/env python3

"""
Plot the orthgonality matrices from cylindrical basis cache file
"""

import os, sys, getopt
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import pyEXP

def help(phrase: str) -> None:
   """Print some usage info"""
   print(phrase)

def main(prog, argv) -> int:
   """
   Plot the orthgonality matrices from cylindrical basis cache file
   """

   cfile = ''
   dir   = ''

   phrase = prog + ': [-h] -c|--cache=file [-d|--dir cache_directory]';

   try:
      opts, args = getopt.getopt(argv,"hc:d:",["cache=","dir="])
   except getopt.GetoptError:
      help(phrase)
      sys.exit(2)

   for opt, arg in opts:
      if opt == '-h':
         help(phrase)
         sys.exit()
      elif opt in ("-d", "--dir"):
         dir = arg
      elif opt in ("-c", "--cache"):
         cfile = arg

   # Check for directory
   if len(dir):
      os.chdir(dir)

   # Get the cache data
   #
   params = pyEXP.basis.Cylindrical.cacheInfo(cfile)

   Mmax = int(params['mmax'])

   bconfig = """
---
id: cylinder
parameters:
  acyl: {}
  hcyl: {}
  mmax: {}
  nmax: {}
  ncylorder: {}
  ncylnx: {}
  ncylny: {}
  eof_file: {}
...
""".format(params['ascl'], params['hscl'], params['mmax'], params['nmax'],
           params['norder'], params['numx'], params['numy'], cfile)
   
   # Construct the basis instance
   #
   basis = pyEXP.basis.Basis.factory(bconfig)

   # Now compute the orthogonality matrices
   #
   ret   = basis.orthoCheck()

   # Plot the matrices as images with a greyscale color map
   #
   fig   = plt.figure()
   ncol  = 4                   # Rows with 4 columns
   nrow  = int(Mmax/ncol)
    
   if ncol*nrow <= Mmax: nrow += 1
   ax = fig.subplots(nrow, ncol).flatten()

   M = 0                       # Harmonic index counter

   for i in range(0, nrow):
      for j in range(0, ncol):
         if M<=Mmax:
            ax[i*ncol+j].imshow(ret[M], interpolation='nearest', cmap=cm.Greys_r)
            ax[i*ncol+j].set_aspect('equal')
            ax[i*ncol+j].set_title('M={}'.format(M))
            M += 1
         else:
            # Remove unused frames
            fig.delaxes(ax[i*ncol+j])

   plt.tight_layout()
   plt.show()

if __name__ == "__main__":
   main(sys.argv[0], sys.argv[1:])
